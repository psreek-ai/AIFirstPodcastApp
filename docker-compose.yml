version: '3.8'

volumes:
  aethercast_db_data:
  aethercast_audio_data:

services:
  api_gateway:
    build:
      context: . # Build context is the project root
      dockerfile: ./aethercast/api_gateway/Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - ./aethercast:/app/aethercast # For live code changes in dev
      - aethercast_db_data:/app/database # Named volume for DB
    env_file:
      - common.env # Shared environment variables
      - ./aethercast/api_gateway/.env # Service-specific vars
    # depends_on: # Example, can be added if strict startup order is needed
      # - tda
      # - cpoa (though cpoa is part of api_gateway image)
      # - aims_service # If API Gateway directly called AIMS
    networks: # Example: assuming a custom network for all backend services
      - aethercast_network

  aims_service:
    build:
      context: ./aethercast/aims_service
      dockerfile: Dockerfile
    container_name: aims_service
    ports:
      - "8008:8000" # Host:Container
    env_file:
      - ./aethercast/aims_service/.env # Users must create this from .env.example
    volumes:
      - ./aethercast/aims_service:/app # For live development of aims_service code
    networks:
      - aethercast_network
    restart: unless-stopped

  aims_tts_service:
    build:
      context: ./aethercast/aims_tts_service
      dockerfile: Dockerfile
    container_name: aims_tts_service
    ports:
      - "9009:9000" # Host:Container
    env_file:
      - ./aethercast/aims_tts_service/.env # Users must create this from .env.example
    volumes:
      - ./aethercast/aims_tts_service:/app # For live development
      - aethercast_audio_data:/shared_audio # Shared volume for TTS output
    networks:
      - aethercast_network
    restart: unless-stopped

  tda:
    build:
      context: .
      dockerfile: ./aethercast/tda/Dockerfile
    ports:
      - "5000:5000" # Assuming TDA runs on 5000
    volumes:
      - ./aethercast:/app/aethercast
      - aethercast_db_data:/app/database
    env_file:
      - common.env
      - ./aethercast/tda/.env
    networks:
      - aethercast_network

  sca:
    build:
      context: .
      dockerfile: ./aethercast/sca/Dockerfile
    ports:
      - "5002:5002" # Assuming SCA runs on 5002
    volumes:
      - ./aethercast:/app/aethercast
    env_file:
      - common.env
      - ./aethercast/sca/.env
    depends_on:
      - aims_service
    networks:
      - aethercast_network

  pswa:
    build:
      context: .
      dockerfile: ./aethercast/pswa/Dockerfile
    ports:
      - "5004:5004" # Assuming PSWA runs on 5004
    volumes:
      - ./aethercast:/app/aethercast
      - aethercast_db_data:/app/database # For script caching
    env_file:
      - common.env
      - ./aethercast/pswa/.env
    depends_on:
      - aims_service
    networks:
      - aethercast_network

  vfa:
    build:
      context: .
      dockerfile: ./aethercast/vfa/Dockerfile
    ports:
      - "5005:5005" # Assuming VFA runs on 5005
    volumes:
      - ./aethercast:/app/aethercast
      # VFA now primarily consumes paths from AIMS_TTS, which are on /shared_audio
      # It might still write test dummy files to a subdir if VFA_SHARED_AUDIO_DIR is set that way.
      - aethercast_audio_data:/shared_audio
    env_file:
      - common.env
      - ./aethercast/vfa/.env
    depends_on:
      - aims_tts_service
    networks:
      - aethercast_network

  asf:
    build:
      context: .
      dockerfile: ./aethercast/asf/Dockerfile
    ports:
      - "5006:5006" # Assuming ASF runs on 5006
    volumes:
      - ./aethercast:/app/aethercast
      - aethercast_audio_data:/shared_audio # ASF needs to read audio files from the shared volume
    env_file:
      - common.env
      - ./aethercast/asf/.env
    networks:
      - aethercast_network

  iga:
    build:
      context: ./aethercast/iga # Corrected context
      dockerfile: Dockerfile
    ports:
      - "5007:5007" # Expose port 5007 for IGA
    env_file:
      # - ./aethercast/iga/.env # Users must create this from .env.example
      # For now, directly using .env.example to ensure it runs out of the box
      # In a real setup, users would copy .env.example to .env and customize
      - ./aethercast/iga/.env.example
    environment:
      PYTHONUNBUFFERED: 1
    volumes:
      - ./aethercast/iga:/app # For live development
    networks:
      - aethercast_network
    restart: unless-stopped

# Define the custom network
networks:
  aethercast_network:
    driver: bridge

# Note on .env files for services:
# Each service's .env file (e.g., aethercast/api_gateway/.env) will need to be updated/created by the user.
# It should source common.env variables and then define its specific ones.
# Example for aethercast/api_gateway/.env:
#   DATABASE_FILE=${DATABASE_FILE_PATH_CONTAINER}
#   TDA_SERVICE_URL=http://tda:5000/discover_topics
#   # ... other API_GW specific vars
#
# Example for aethercast/pswa/.env:
#   PSWA_DATABASE_PATH=${DATABASE_FILE_PATH_CONTAINER}
#   OPENAI_API_KEY=your_real_key_or_leave_blank_for_no_external_calls_if_test_mode_is_on
#   PSWA_TEST_MODE_ENABLED=True # Enable test mode for integration tests
#
# Example for aethercast/vfa/.env:
#   VFA_SHARED_AUDIO_DIR=${SHARED_AUDIO_DIR_CONTAINER}
#   VFA_TEST_MODE_ENABLED=True # Enable test mode
#
# These service-specific .env files are NOT created by this tool automatically.
# They need to be present or created manually by the user, often by copying from their .env.example
# and then adjusting for the Docker Compose environment (using service names for URLs, container paths).
# The common.env provides the container paths, which are then referenced in the service .env files.
#
# The Dockerfiles copy the *entire* ./aethercast directory into /app/aethercast.
# This means the Python code should use imports like 'from aethercast.module.file import ...'
# and the PYTHONPATH=/app should make this work.
# The CMD ["python", "aethercast/service_dir/main.py"] should also work with this structure.
# The build context for each service is set to '.' (project root) to allow Dockerfiles to COPY ./aethercast.
# For IGA, context is specific to its directory as it's self-contained.
